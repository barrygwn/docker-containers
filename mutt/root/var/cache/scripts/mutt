#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin

MUTT_USER=${MUTT_USER:-mutt}
MUTT_REPO=${MUTT_REPO:-hurricane}

# do we need to use sudo to start docker containers?
( id -Gn | grep -q docker ) || SUDO=sudo

USER_UID=$(id -u)
USER_GID=$(id -g)

XSOCK=/tmp/.X11-unix
XAUTH=/tmp/.docker.xauth

list_commands() {
  echo ""
  echo "Launch mutt using:"
  echo "  mutt                        - Launch mutt"
  echo ""
  exit 1
}

cleanup_stopped_mutt_instances() {
  echo "Cleaning up stopped mutt instances..."
  for c in $(${SUDO} docker ps -a -q)
  do
    image=$(${SUDO} docker inspect -f {{.Config.Image}} ${c})
    if [[ ${image} == "${MUTT_REPO}/mutt:latest" ]]; then
      running=$(${SUDO} docker inspect -f {{.State.Running}} ${c})
      if [[ ${running} != true ]]; then
        ${SUDO} docker rm -v "${c}" >/dev/null
      fi
    fi
  done
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=USER_UID=${USER_UID}"
  ENV_VARS+=" --env=USER_GID=${USER_GID}"
  ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  ENV_VARS+=" --env=MUTT_USER=${MUTT_USER}"
  ENV_VARS+=" --env=DISPLAY"
  ENV_VARS+=" --env=XAUTHORITY=${XAUTH}"

  if [ ! -z ${GPG_AGENT_INFO} ]; then
    ENV_VARS+=" --env=GPG_AGENT_INFO=${GPG_AGENT_INFO}"
  else
    echo "GPG agent is not running."
  fi
  if [ ! -z ${GPGKEY} ]; then
    ENV_VARS+=" --env=GPGKEY=${GPGKEY}"
  else
    echo "You need to export your default GPGKEY i.e. export GPGKEY=0x0000."
    exit 1
  fi
}

prepare_docker_volume_parameters() {
  touch ${XAUTH}
  xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f ${XAUTH} nmerge -

  VOLUMES+=" --volume=${XSOCK}:${XSOCK}"
  VOLUMES+=" --volume=${XAUTH}:${XAUTH}"

  # check to see if secrets exits
  [ ! -f ~/.muttsecrets ] && \
    echo "Error: file .muttsecrets is missing." && \
    exit 1
  VOLUMES+=" --volume=/home/${USER}/.muttsecrets:/home/${MUTT_USER}/.muttsecrets:ro"

  # check to see if user has gnupg
  [ ! -d ~/.gnupg ] && \
    echo "Please setup GnuPG." && \
    exit 1
  VOLUMES+=" --volume=/home/${USER}/.gnupg:/home/${MUTT_USER}/.gnupg"

  # Get GPG agent volume
  GPG_FILE=$(echo ${GPG_AGENT_INFO} | sed -e 's/:.*//g')
  [ -e ${GPG_FILE} ] && \
    VOLUMES+=" --volume=${GPG_FILE}:${GPG_FILE}"

  # make mail directory if it doesn't exist
  [ ! -d ~/.mail ] && \
    echo "Making mail directory." && \
    mkdir -p ~/.mail
  VOLUMES+=" --volume=/home/${USER}/.mail:/home/${MUTT_USER}/.mail"

  # make mutt directory if it doesn't exist
  [ ! -d ~/.mutt/cache ] && \
    echo "Making mutt cache directory." && \
    mkdir -p ~/.mutt/cache
  VOLUMES+=" --volume=/home/${USER}/.mutt/cache:/home/${MUTT_USER}/.mutt/cache"

  # make mbsync directory if it doesn't exist
  [ ! -d ~/.mbsync ] && \
    echo "Making isync directory." && \
    mkdir -p ~/.mbsync
  VOLUMES+=" --volume=/home/${USER}/.mbsync:/home/${MUTT_USER}/.mbsync"
}

prog=$(basename $0)
exec=$(which $prog)
if [[ ${prog} == "mutt" ]]; then
  prog=/bin/mutt
  [ "${1}" == "bash" ] && \
    prog=bash && \
    shift
  [[ "${1}" == "help" ]] && list_commands && exit 1
fi
if [ ${TERMINAL} == "urxvt" ] || [ ${TERMINAL} == "termite" ]; then
  PRECMD="${TERMINAL} -name mutt -e "
fi

cleanup_stopped_mutt_instances
prepare_docker_env_parameters
prepare_docker_volume_parameters

echo "Starting ${prog}..."
#exec ${PRECMD} \
${SUDO} docker run -it \
  --rm \
  ${ENV_VARS} \
  ${VOLUMES} \
  --name="mutt" \
  --hostname="mutt" \
  ${MUTT_REPO}/mutt:latest ${prog} $@
