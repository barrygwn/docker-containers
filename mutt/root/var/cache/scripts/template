#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin
TAG_NAME="TAG_NAME"
IMG_NAME="IMG_NAME"
APP_NAME="APP_NAME"
APP_USER=${APP_USER:-$USER}
APP_REPO=${APP_REPO:-hurricane}
APP_CONFIG=${APP_CONFIG:-"/home/${APP_USER}/.${APP_NAME}"}

( id -Gn | grep -q docker ) || [ $EUID == 0 ] || SUDO=sudo

if [ ${APP_USER} != "appuser" ]; then
  APP_UID=$(getent passwd $APP_USER | awk -F":" '{print $3}')
  APP_GID=$(getent passwd $APP_USER | awk -F":" '{print $4}')
else
  APP_UID=$(id -u)
  APP_GID=$(id -g)
fi

if [ ${APP_USER} == "nobody" ]; then
  APP_USER="appuser"
fi

list_options() {
  echo ""
  echo "Launch ${APP_NAME} using:"
  echo "  ${APP_NAME}                          - Launch ${APP_NAME}"
  echo "  ${APP_NAME} bash                     - Launch bash shell in ${APP_NAME} container"
  echo ""
  exit 1
}

cleanup_stopped_instances() {
  for c in $(${SUDO} docker ps -a -q)
  do
    image=$(${SUDO} docker inspect --format="{{.Config.Image}}" ${c})
    if [[ ${image} == "${APP_REPO}/${IMG_NAME}:${TAG_NAME}" ]]; then
      running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${c})
      if [[ ${running} != true ]]; then
        echo "Cleaning up stopped ${APP_NAME} instances..."
        ${SUDO} docker rm -v "${c}" >/dev/null
      fi
    fi
  done
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=APP_UID=${APP_UID}"
  ENV_VARS+=" --env=APP_GID=${APP_GID}"
  ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  ENV_VARS+=" --env=APP_USER=${APP_USER}"
  ENV_VARS+=" --env=DISPLAY"

  if [ ! -z ${GPGKEY} ]; then
    ENV_VARS+=" --env=GPGKEY=${GPGKEY}"
  else
    echo "You need to export your default GPGKEY i.e. export GPGKEY=0x0000."
    exit 1
  fi

  if [ -f /etc/timezone ]; then
    ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  else
    [ ! -z "${TIMEZONE}" ] && ENV_VARS+=" --env=TZ=${TIMEZONE}"
  fi
}

prepare_docker_volume_parameters() {
  # check to see if secrets exits
  [ ! -f ~/.muttsecrets ] && \
    echo "Error: file .muttsecrets is missing." && \
    exit 1
  VOLUMES+=" --volume=/home/${USER}/.muttsecrets:/home/${APP_USER}/.muttsecrets:ro"

  # check to see if user has gnupg
  [ ! -d ~/.gnupg ] && \
    echo "Please setup GnuPG." && \
    exit 1
  VOLUMES+=" --volume=/home/${USER}/.gnupg/S.gpg-agent:/home/${APP_USER}/.gnupg/S.gpg-agent"
  VOLUMES+=" --volume=/home/${USER}/.gnupg/trustdb.gpg:/home/${APP_USER}/.gnupg/trustdb.gpg"
  VOLUMES+=" --volume=/home/${USER}/.gnupg/pubring.gpg:/home/${APP_USER}/.gnupg/pubring.gpg"

  # make mail directory if it doesn't exist
  [ ! -d ~/.mail ] && \
    echo "Making mail directory." && \
    mkdir -p ~/.mail
  VOLUMES+=" --volume=/home/${USER}/.mail:/home/${APP_USER}/.mail"

  # make mutt directory if it doesn't exist
  [ ! -d ~/.mutt/cache ] && \
    echo "Making mutt cache directory." && \
    mkdir -p ~/.mutt/cache
  VOLUMES+=" --volume=/home/${USER}/.mutt/cache:/home/${APP_USER}/.mutt/cache"
}

prog=$(basename $0)
if [[ ${prog} == "${APP_NAME}" ]]; then
  [ "${1}" == "bash" ] && \
    prog=bash && \
    shift
  [[ "${1}" == "help" ]] && list_options && exit 1
fi

cleanup_stopped_instances
prepare_docker_env_parameters
prepare_docker_volume_parameters

echo "Starting ${prog}..."
${SUDO} docker run -it \
  --rm \
  ${ENV_VARS} \
  ${VOLUMES} \
  --name=${APP_NAME} \
  ${APP_REPO}/${IMG_NAME}:${TAG_NAME} ${prog} $@
