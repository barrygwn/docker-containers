#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin
TAG_NAME="TAG_NAME"
IMG_NAME="IMG_NAME"
APP_NAME="APP_NAME"
APP_USER=${APP_USER:-$USER}
APP_REPO=${APP_REPO:-hurricane}
APP_CONFIG=${APP_CONFIG:-"/home/${APP_USER}/.${APP_NAME}"}
XSOCK=/tmp/.X11-unix
XAUTH=/tmp/.docker.xauth

( id -Gn | grep -q docker ) || [[ $EUID == 0 ]] || SUDO=sudo

if [[ ${APP_USER} != "appuser" ]]; then
  APP_UID=$(getent passwd $APP_USER | awk -F":" '{print $3}')
  APP_GID=$(getent passwd $APP_USER | awk -F":" '{print $4}')
else
  APP_UID=$(id -u)
  APP_GID=$(id -g)
fi

if [[ ${APP_USER} == "nobody" ]]; then
  APP_USER="appuser"
fi

list_options() {
  echo ""
  echo "Launch ${APP_NAME} using:"
  echo "  ${APP_NAME}                          - Launch ${APP_NAME}"
  echo "  ${APP_NAME} bash                     - Launch bash shell in ${APP_NAME} container"
  echo ""
  exit 1
}

cleanup_stopped_instances() {
  for c in $(${SUDO} docker ps -a -q)
  do
    image=$(${SUDO} docker inspect --format="{{.Config.Image}}" ${c})
    if [[ ${image} == "${APP_REPO}/${IMG_NAME}:${TAG_NAME}" ]]; then
      running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${c})
      if [[ ${running} != true ]]; then
        echo "Cleaning up stopped ${APP_NAME} instances..."
        ${SUDO} docker rm -v "${c}" >/dev/null
      fi
    fi
  done
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=APP_UID=${APP_UID}"
  ENV_VARS+=" --env=APP_GID=${APP_GID}"
  ENV_VARS+=" --env=APP_USER=${APP_USER}"
  ENV_VARS+=" --env=DBUS_SESSION_BUS_ADDRESS=unix:path=/var/run/user/$APP_UID/bus"

  if [[ -f /etc/timezone ]]; then
    ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  elif [[ ! -z "${TIMEZONE}" ]]; then
    ENV_VARS+=" --env=TZ=${TIMEZONE}"
  elif [[ -f /etc/localtime ]]; then
    TZ=$(ls -la /etc/localtime| awk '{print $11}' | awk -F/ '{printf("%s/%s",$5,$6)}')
    ENV_VARS+=" --env=TZ=${TZ}"
  fi
}

prepare_docker_env_display_parameters() {
  ENV_VARS+=" --env=DISPLAY"
  ENV_VARS+=" --env=XAUTHORITY=${XAUTH}"
}

prepare_docker_volume_parameters() {
  # check to see if secrets exits
  [[ ! -f ~/.muttsecrets ]] && \
    echo "Error: file .muttsecrets is missing." && \
    exit 1
  VOLUMES+=" --volume=/home/${USER}/.muttsecrets:/home/${APP_USER}/.muttsecrets:ro"

  # check to see if user has gnupg
  [[ ! -d ~/.gnupg ]] && \
    echo "Please setup GnuPG." && \
    exit 1
  VOLUMES+=" --volume=/run/user/${APP_UID}/gnupg/S.gpg-agent:/home/${USER}/.gnupg/S.gpg-agent"
  VOLUMES+=" --volume=/home/${USER}/.gnupg/trustdb.gpg:/home/${APP_USER}/.gnupg/trustdb.gpg"
  VOLUMES+=" --volume=/home/${USER}/.gnupg/pubring.gpg:/home/${APP_USER}/.gnupg/pubring.gpg"
  VOLUMES+=" --volume=/home/${USER}/.gnupg/secring.gpg:/home/${APP_USER}/.gnupg/secring.gpg"
  VOLUMES+=" --volume=/home/${USER}/.gnupg/private-keys-v1.d:/home/${APP_USER}/.gnupg/private-keys-v1.d"
  VOLUMES+=" --volume=/home/${USER}/.gnupg/.gpg-v21-migrated:/home/${APP_USER}/.gnupg/.gpg-v21-migrated"

  # make mail directory if it doesn't exist
  [[ ! -d ~/.mail ]] && \
    echo "Making mail directory." && \
    mkdir -p ~/.mail
  VOLUMES+=" --volume=/home/${USER}/.mail:/home/${APP_USER}/.mail"

  # make mutt directory if it doesn't exist
  [[ ! -d ~/.mutt/cache ]] && \
    echo "Making mutt cache directory." && \
    mkdir -p ~/.mutt/cache
  [[ ! -d ~/.mutt/addons ]] && \
    echo "Making mutt addons directory." && \
    mkdir -p ~/.mutt/addons
  VOLUMES+=" --volume=/home/${USER}/.mutt/cache:/home/${APP_USER}/.mutt/cache"
  VOLUMES+=" --volume=/home/${USER}/.mutt/addons:/home/${APP_USER}/.mutt/addons"

  # make downloads directory if doesn't exist
  [[ ! -d ~/Downloads ]] && \
    echo "Making Downloads directory." && \
    mkdir -p ~/Downloads
  VOLUMES+=" --volume=/home/${USER}/Downloads:/home/${APP_USER}/Downloads"

  [[ -f ~/.goobook_auth.json ]] && \
    VOLUMES+=" --volume=/home/${USER}/.goobook_auth.json:/home/${APP_USER}/.goobook_auth.json"
}

prepare_docker_volume_display_parameters() {
  touch ${XAUTH}
  xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f ${XAUTH} nmerge -

  VOLUMES+=" --volume=${XSOCK}:${XSOCK}"
  VOLUMES+=" --volume=${XAUTH}:${XAUTH}"
  VOLUMES+=" --volume=/var/run/dbus:/var/run/dbus"
  VOLUMES+=" --volume=/var/run/user/$APP_UID/bus:/var/run/user/$APP_UID/bus"
  VOLUMES+=" --volume=/etc/localtime:/etc/localtime:ro"
}

prog=$(basename $0)
if [[ ${prog} == "${APP_NAME}" ]]; then
  [[ "${1}" == "bash" ]] && \
    prog=${1} && \
    shift
  [[ "${1}" == "setup_goobook" ]] && \
    prog=${1} && \
    shift
  [[ "${1}" == "help" ]] && list_options && exit 1
fi

cleanup_stopped_instances
prepare_docker_env_parameters
prepare_docker_env_display_parameters
prepare_docker_volume_parameters
prepare_docker_volume_display_parameters

if [[ "$prog" == "setup_goobook" ]]; then
  if [[ ${running} != true ]]; then
    ${SUDO} docker run -it \
      ${ENV_VARS} \
      ${VOLUMES} \
      --name=${APP_NAME} \
      ${APP_REPO}/${IMG_NAME}:${TAG_NAME} ${prog}
  else
    ${SUDO} docker exec -it \
      ${APP_NAME} \
      ${prog}
  fi
  ${SUDO} docker cp ${APP_NAME}:/home/$APP_USER/.goobook_auth.json /home/$USER/
else
  echo "Starting ${prog}..."
  ${SUDO} docker run -it \
    --rm \
    ${ENV_VARS} \
    ${VOLUMES} \
    --name=${APP_NAME} \
    ${APP_REPO}/${IMG_NAME}:${TAG_NAME} ${prog} $@
fi
