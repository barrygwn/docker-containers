#!/bin/bash

# ----------------------------------------------------------------------
# maildir-notmuch-sync
#
# a script to sync up maildir folders with a cloud account using isync.
# Additionally, it will sync up maildir folders (and thus gmail labels)
# with notmuch tags
#
# Ethan Schoonover / es@ethanschoonover / @ethanschoonover
# Updated by: Carlos Hernandez / hurricanehrndz / carlos@techbyte.ca
# Style adheres to google's bash style guide:
# https://google.github.io/styleguide/shell.xml
# ----------------------------------------------------------------------

# ----------------------------------------------------------------------
# Usage:
# ----------------------------------------------------------------------
#
#    maildir-notmuch-sync [--dry-run] "~/var/mail/accounts/"
#
# Designed to be called from cron or systemd-timer
#
# The argument passed to maildir-notmuch-sync should be the same as the
# folder value set in muttrc
#
# This allows the script to use short tags for multiple accounts without
# getting confused about what tag goes where.

# ----------------------------------------------------------------------
# Dry-run
# ----------------------------------------------------------------------
#
# Call the script directly from the command line with the intial
# argument "--dry-run" to test the result:
#
#    maildir-notmuch-sync "--dry-run" "~/var/mail/accounts/"
#
# Dry-run mode will echo a summary of changes and any deletions, copies
# but will NOT make any changes


# Maildir Information
# ----------------------------------

inbox="INBOX"      # (mutt's spool dir) - both the tag and folder
sent="sent"        # (mutt's record dir) - both the tag and folder
archive="archive"  # (mutt's mbox/received) - both the tag and folder
trash="trash"      # trash maildir, gmail requires for real deletion

# Note that the tag/folder values (INBOX/SENT/etc) must match
# your local maildir names, after any nametrans by offlineimap. For
# example, my own "All Mail" is translated by isync to "archive"
# (lowercase) and thus my ARCHIVE value is "archive".
#
# Again, please note that these ARE case sensitive values and must
# match your local maildir as offlineimap creates it.


# Notmuch Tag Information
# ----------------------------------

# if multiple new.tags in notmuch, identify transient tag here
# this tag is only used as a temporary tag during script run
new_tag="new"

# the tag notmuch uses to keep track of unread status
# also used by mutt-kz (be careful! assigning this in mutt-kz
# and then removing an unread tag really does mark mail as read,
# possibly in bulk!)
unread_tag="unread"

# if true, convert "new" tag to "unread" at end of script run
# otherwise new tag is simple removed
make_new_unread=false

# convert infix slashes to dashes in tags,
# e.g. "clients/bob" becomes "clients-bob"
slashes_to_dashes=false

# shorter, trimmed tags; see description below
TRIM_ACCOUNT_PREFIX_IN_TAGS=true

# ----------------------------------------------------------------------
# Script settings
# ----------------------------------------------------------------------

set -o errexit
set -o nounset

# check for special run mode
# --dry-run (-d)
# --help    (-h)
# --account-tag (-t)

while [[ $# > 0 ]]; do
  opt="$1"
  case $opt in
    -h|--help)
      echo "usage: $(basename $0) [--dry-run]"; exit;
      ;;
    -d|--dry-run)
      runcmd=echo
      dryrun=true
      dryrun_msg="- dryrun (no changes will be made)"
      ;;
    *)
      runcmd=${runcmd:-eval}
      dryrun=${dryrun:-false}
      last_arg="$opt";
      ;;
  esac
shift
done

# ----------------------------------------------------------------------
# Notmuch config checks
# ----------------------------------------------------------------------

# check if there is an existing notmuch configuration and assign
# the value of new.tags to a variable
# ----------------------------------
if ! notmuch config list &>/dev/null; then
cat <<EOF
------------------------------------
Missing notmuch config file.

Please configure notmuch and run 'notmuch new' once prior to running
$(basename $0). See notes in this script for recommendations on notmuch
configuration values.
------------------------------------
EOF
  exit 1;
else # get the current notmuch new.tags value
  nm_new_tags="$(notmuch config list | grep 'new.tags' | cut -f2 -d'=')"
fi


# confirm that the "new.tags" value in notmuch is not empty
# ----------------------------------
if [[ -z "$nm_new_tags" ]]; then
cat <<-EOF
------------------------------------
The "new.tags" value in your notmuch config is set to an empty value.
Please add a new.tags value by running:

  notmuch config set new.tags new

or edit the [new] section of your ~/.notmuch-config file and add:

  tags=new

or your desired set of new tags.
------------------------------------
EOF
exit 1; fi


# confirm that the "new.tags" value in notmuch is singlular, or request
# that the user set a manual value here in the script
# ----------------------------------
if [[ "$nm_new_tags" != "${nm_new_tags#*;}" ]] && \
  [[ "$nm_new_tags" == "${nm_new_tags#*${new_tag:-}*}" ]];
then
cat <<-EOF
------------------------------------
You have multiple "new.tags" values specified in your notmuch config.
This is fine as long as it's intentional. However this script requires
one "transient" new tag (e.g. "new") that will be used during the script
execution, and removed at the end of the script run in order to identify
truly new messages.

Please identify this tag in the GLOBAL VARIABLES section of this script
($0) by adding/uncommenting a value such as:

  new_tag=new

If you did not intend to set multiple tags in your notmuch config, please
correct it by running:

  notmuch config set new.tags new

or editing the [new] section of your ~/.notmuch-config file and
adding

  tags=new

or your desired set of new tags.
------------------------------------
EOF
exit 1;
elif [[ "$nm_new_tags" == "${nm_new_tags#*;}" ]] && \
  [[ "$nm_new_tags" != "${new_tag}" ]]; then
cat <<-EOF
------------------------------------
You have the notmuch config value "new.tags" set to a value that does
not correspond to the value for \$NEW_TAG in this script.

  Your notmuch new.tags == $NM_NEW_TAGS
  This script's NEW_TAG == $NEW_TAG

This tag will be used as a transient indicator during script processing.
Please set it to a matching value such as "new" for both the notmuch
config and NEW_TAG in this script.

Note that you may use multiple tags in your notmuch new.tags value that
are separated by ; as long as at least one of them matches the value for
NEW_TAG in this script.
------------------------------------
EOF
exit 1; fi

# ----------------------------------------------------------------------
# Notmuch database path
# ----------------------------------------------------------------------
# the directories contained by this path are scanned for mail, so
# we use this to locate and identify maildir folders

# Source from existing notmuch config
notmuch_root="$(notmuch config list | grep 'database.path' | cut -f2 -d'=')"

# Normalize path by trimming trailing slash, if any, and then adding trailing slash
notmuch_root="${notmuch_root%/}"


# ----------------------------------------------------------------------
# Account maildir root path
# ----------------------------------------------------------------------
# passed as a command line argument

# Normalize path by trimming trailing slash, if any
# (use eval in case user quoted a path with ~ in it, though they shouldn't have)
eval "maildir_root=${last_arg%/}"

# ----------------------------------------------------------------------
# Helper Functions
# ----------------------------------------------------------------------
construct_new_filename ()
{
# Maildir sync programs require filenames to be unique, so when moving emails
# it is best to construct new names.
  local old_filename="$1"
  local rand_unint64=$(od -vAn -N8 -tu8 < /dev/urandom | tr -d ' ')
  local time_stamp=$(date +%s)
  local hostname=$(echo $HOSTNAME)
  local flags=$(sed -e "s/.*:2,\(.*\)/\1/" <<< ${old_filename})
  echo "${timestamp}.R${rand_unint4}.${hostname}:2,${flags}"
}

notmuch_tag_from_full_path ()
{
# This take a path such as: /work/INBOX
# and converts it to a tag: work-INBOX or INBOX
#
# A nested maildir such as: /work/clients/bob
# is converted to a tag:    work/clients/bob
#
# If the trim_account_prefix_in_tags variable is set to true, then
# a nested maildir such as: /work/clients/bob
# is converted to a tag:    clients/bob
#
# If slashes_to_dashes is true, infix slashes will be converted to
# dashes, e.g. "client/bob" becomes "client-bob"

case $trim_account_prefix_in_tags in
    true|TRUE|yes|YES|y|Y)  local trimmer="$maildir_account_root" ;;
    *)            local trimmer="$notmuch_root"     ;;
esac

case $slashes_to_dashes in
    true|TRUE|yes|YES|y|Y)  echo "${1#$trimmer/}" | sed "s+/+-+g" ;;
    *)            echo "${1#$trimmer/}"         ;;
esac

}

notmuch_folder_from_full_path ()
{
# Takes argument:
#
#    /home/username/mail/work/INBOX
#
# and uses notmuch root path to trim and return, for example:
#
#    /work/INBOX
#
# which is the full form searchable from notmuch using a query such as:
#
#    notmuch search folder:/work/INBOX
  echo "${1#$notmuch_root/}"
}

maildir_account_folder_from_full_path ()
{
# Takes argument:
#
#    /home/username/mail/work/INBOX
#
# and uses maildir account root path to trim and return, for example:
#
#    /INBOX
#
# which is the full form searchable from notmuch using a query such as:
#
#    notmuch search folder:/work/INBOX
  echo "${1#$maildir_account_root}"
}

# ----------------------------------------------------------------------
# PRE Notmuch DB Sync Functions
# ----------------------------------------------------------------------
# executed prior to 'notmuch new'
notmuch_state_to_maildir__create_maildir ()
{
# Scenario:
# NOTMUCH State:
# Number of Notmuch Tags > Notmuch Folders
#
# MAILDIR STATE:
# No change from previous state.
#
# Tags have been added to a message in a virtual folder (in the notmuch db).
# The number of folders within the root maildir does not match the number of
# tags in the notmuch db. This indicates that we need create folder for those
# tags.
  local this_maildir_full_path="$1"
  local this_account_name="$2"
  local these_notmuch_tags="$( \
                notmuch search --output=tags \
                tag:\"$this_account_name\" \
                )"

  for this_notmuch_tag in $these_notmuch_tags; do
    if [[ ! " ${maildir_accounts[@]} " =~ " ${this_notmuch_tag} " ]]; then
      if [ ! -d "$this_maildir_full_path/$this_notmuch_tag" ]; then
        [[ "$this_notmuch_tag" != "$this_account_name" ]] && \
          [[ "$this_notmuch_tag" != "new" ]] && \
          [[ "$this_notmuch_tag" != "unread" ]] && \
          [[ "$this_notmuch_tag" != "replied" ]] && \
          [[ "$this_notmuch_tag" != "signed" ]] && \
          [[ "$this_notmuch_tag" != "attachment" ]] && \
          $runcmd "mkdir -p $this_maildir_full_path/$this_notmuch_tag/{cur,new,tmp}" || true
      fi
    fi
  done
}

notmuch_state_to_maildir__move_to_maildir ()
{
# Scenario:
#
# NOTMUCH STATE (per message):
# Number of Notmuch Tags > Number of Notmuch Folders
#
# MAILDIR STATE:
# No change from previous state.
#
# Tags have been added to a message in a virtual folder (in the notmuch db).
# The number of folders associated with a message has not been changed in
# the notmuch db. This indicates that we need to copy the message to a
# new maildir. After the next 'notmuch new' db update, the tags/folders
# should thus be at parity again.

  local THIS_MAILDIR_FULL_PATH="$1"
  local THIS_ACCOUNT_NAME="$2"
  local THIS_NOTMUCH_FOLDER="$(Notmuch_Folder_From_Full_Path $THIS_MAILDIR_FULL_PATH)"
  local THIS_NOTMUCH_TAG="$(Notmuch_Tag_From_Full_Path $THIS_MAILDIR_FULL_PATH)"
  if [[ " ${MAILDIR_ACCOUNTS[@]} " =~ " ${THIS_NOTMUCH_TAG} " ]]; then
    return;
  fi
  local THESE_MESSAGE_IDS_TO_COPY="$(\
                    notmuch search --output=messages\
                    tag:"$THIS_NOTMUCH_TAG" \
                    AND tag:"$THIS_ACCOUNT_NAME" \
                    AND path:"$THIS_ACCOUNT_NAME/**" \
                    NOT folder:"$THIS_NOTMUCH_FOLDER" \
                    NOT tag:"$NEW_TAG" \
                    )"

  # We are running this function prior to the remove function below
  # but there is still the edge case wherein the user has manually
  # deleted a mail message in mutt (better to do all this with tags
  # and virtual folders, but let's accommodate). So we should either
  # prioritize the archive folder or cycle through the list of paths
  # till we find one that is usable.

  for THIS_MESSAGE_ID in $THESE_MESSAGE_IDS_TO_COPY; do
    local THIS_MESSAGE_ALL_SOURCE_PATHS="$(notmuch search --output=files "$THIS_MESSAGE_ID")"
    local FOUND=false
    while read line; do
      local THIS_MESSAGE_SOURCE_PATH="$line"
      if [[ -e "$THIS_MESSAGE_SOURCE_PATH" ]]; then
        FOUND=true
        break
      fi
    done <<< "$THIS_MESSAGE_ALL_SOURCE_PATHS"
    if $FOUND; then
      MESSAGE_FILENAME=$(basename $THIS_MESSAGE_SOURCE_PATH)
      DEST_FILENAME=$(echo $MESSAGE_FILENAME  | sed -e s%",U=.*:"%",U=:"%)
      if $RUNCMD "cp \"$THIS_MESSAGE_SOURCE_PATH\" \"$THIS_MAILDIR_FULL_PATH/cur/$DEST_FILENAME\""; then
        echo -n "Copied message with new tag to"
        echo " $(Maildir_Account_Folder_From_Full_Path "$THIS_MAILDIR_FULL_PATH")"
      else
        echo -e "\nWARNING: Failed to copy mail file (unknown error):"
        echo -e "SOURCE:  \"$THIS_MESSAGE_SOURCE_PATH\"\nDESTINATION\"$THIS_MAILDIR_FULL_PATH/cur\"\n"
      fi
    else
      echo -e "\nWARNING: Failed to copy mail file (no valid source paths!):"
      echo "ID: $THIS_MESSAGE_ID"
      echo "NOTMUCH FOLDER: $THIS_NOTMUCH_FOLDER"
      echo -e "DESTINATION MAILDIR: $THIS_MAILDIR_FULL_PATH\n"
    fi
  done
}

Notmuch_State_To_Maildir__Remove_From_Maildir ()
{
# Scenario:
#
# NOTMUCH STATE (per message):
# Number of Notmuch Tags < Number of Notmuch Folders
#
# MAILDIR STATE:
# No change from previous state.
#
# Tags have been removed from a message in a virtual folder (and thus
# in the notmuch db). The number of folders associated with a message
# has of course not yet changed. We need to remove the messages from
# maildir folders from which it has been untagged.
#
# Note that the search below uses the $THIS_ACCOUNT_NAME folder/tag value
# as a check that the messages have been previously indexed and processed
# by this script.

  local THIS_MAILDIR_FULL_PATH="$1"
  local THIS_ACCOUNT_NAME="$2"
  local THIS_NOTMUCH_FOLDER="$(Notmuch_Folder_From_Full_Path $THIS_MAILDIR_FULL_PATH)"
  local THIS_NOTMUCH_TAG="$(Notmuch_Tag_From_Full_Path $THIS_MAILDIR_FULL_PATH)"
  local THESE_MESSAGE_IDS_TO_REMOVE="$(\
                    notmuch search --output=messages\
                    folder:"$THIS_NOTMUCH_FOLDER" \
                    AND tag:"$THIS_ACCOUNT_NAME" \
                    AND path:"$THIS_ACCOUNT_NAME/**" \
                    NOT tag:"$THIS_NOTMUCH_TAG" \
                    NOT tag:"$NEW_TAG")"

  for THIS_MESSAGE_ID in $THESE_MESSAGE_IDS_TO_REMOVE; do
    local THIS_MESSAGE_PATH="$(notmuch search --output=files "$THIS_MESSAGE_ID" | \
      grep -e "^$THIS_MAILDIR_FULL_PATH")"

    if [[ -e "$THIS_MESSAGE_PATH" ]]; then
      if $RUNCMD "rm \"$THIS_MESSAGE_PATH\""; then
        echo -n "Removed untagged message from"
        echo " $(Maildir_Account_Folder_From_Full_Path "$THIS_MAILDIR_FULL_PATH")"
      else
        echo -e "\nWARNING: Failed to remove mail file (unknown error):"
        echo "ID:$THIS_MESSAGE_ID"
        echo "FOLDER:$THIS_NOTMUCH_FOLDER"
        echo -e "MESSAGE PATH:$THIS_MESSAGE_PATH\n"
      fi
    else
      echo -e "\nWARNING: Unable to remove missing mail file:"
      echo "ID:$THIS_MESSAGE_ID"
      echo "FOLDER:$THIS_NOTMUCH_FOLDER"
      echo -e "MESSAGE PATH:$THIS_MESSAGE_PATH\n"
    fi
  done
}

# ----------------------------------------------------------------------
# SYNC Notmuch DB Sync Functions
# ----------------------------------------------------------------------

Notmuch_Update ()
{
  $RUNCMD "notmuch new";
}

# ----------------------------------------------------------------------
# POST Notmuch DB Sync Functions
# ----------------------------------------------------------------------
# executed after 'notmuch new' (otherwise the notmuch state looks the
# same as the states above)

Maildir_State_To_Notmuch__Add_Tags_To_Notmuch ()
{
# Scenario:
#
# NOTMUCH STATE (per message):
# Number of Notmuch Tags < Number of Notmuch Folders
#
# MAILDIR STATE:
# Message in a new folder (either via CLI/mutt copy, move or incoming sync)
#
# A message is in a "physical" maildir directory but does not have a
# corresponding notmuch tag. For example:
#
#    ~/mail/INBOX/message123 should have a tag "INBOX"
#
# We process all mails in each maildir directory (mailbox) and add tags
# as required.

  local THIS_MAILDIR_FULL_PATH="$1"
  local THIS_ACCOUNT_NAME="$2"
  local THIS_NOTMUCH_FOLDER="$(Notmuch_Folder_From_Full_Path $THIS_MAILDIR_FULL_PATH)"
  local THIS_NOTMUCH_TAG="$(Notmuch_Tag_From_Full_Path $THIS_MAILDIR_FULL_PATH)"
  local THIS_NOTMUCH_QUERY="folder:\"$THIS_NOTMUCH_FOLDER\" AND path:\"$THIS_ACCOUNT_NAME/**\" NOT tag:\"$THIS_NOTMUCH_TAG\""
  local THIS_COUNT="$(notmuch count $THIS_NOTMUCH_QUERY)"

  $DRYRUN || notmuch tag +"$THIS_NOTMUCH_TAG" +"$THIS_ACCOUNT_NAME" -- $THIS_NOTMUCH_QUERY
  [[ $THIS_COUNT > 0 ]] && echo "Tagged $THIS_COUNT messages with \"$THIS_NOTMUCH_TAG\" and \"$THIS_ACCOUNT_NAME\"" || true
}

Maildir_State_To_Notmuch__Remove_Tags_From_Notmuch ()
{
# Scenario:
#
# NOTMUCH STATE (per message):
# Number of Notmuch Tags > Number of Notmuch Folders
#
# MAILDIR STATE:
# Message removed from folder, either via rm, mutt delete, or offlineimap sync
#
# A message has been removed from a maildir directory. Notmuch is aware of
# this (this should only be checked/run after a 'notmuch new' update).
# However, we still have the "old" tag on the message.
#
# We skip the trash since we might want to restore those in future?

  local THIS_MAILDIR_FULL_PATH="$1"
  local THIS_ACCOUNT_NAME="$2"
  local THIS_NOTMUCH_FOLDER="$(Notmuch_Folder_From_Full_Path $THIS_MAILDIR_FULL_PATH)"
  local THIS_NOTMUCH_TAG="$(Notmuch_Tag_From_Full_Path $THIS_MAILDIR_FULL_PATH)"
  local THIS_NOTMUCH_QUERY="tag:\"$THIS_NOTMUCH_TAG\" \
                AND path:\"$THIS_ACCOUNT_NAME/**\" \
                NOT folder:\"$THIS_NOTMUCH_FOLDER\""
  local THIS_COUNT="$(notmuch count $THIS_NOTMUCH_QUERY)"

  $DRYRUN || notmuch tag -"$THIS_NOTMUCH_TAG" -- $THIS_NOTMUCH_QUERY
  [[ $THIS_COUNT > 0 ]] && echo "Untagged $THIS_COUNT messages, removed \"$THIS_NOTMUCH_TAG\"" || true
}

# ----------------------------------------------------------------------
# CLEANUP Functions
# ----------------------------------------------------------------------

Notmuch_Cleanup ()
{
  # anything in sent mail should have the unread flag removed
  $RUNCMD "notmuch tag -\"$UNREAD_TAG\" -- folder:\"$SENT\""

  # remove "$NEW_TAG" tags, optionally converting to "$UNREAD_TAG"
  case $MAKE_NEW_UNREAD in
    true|TRUE|yes|YES|y|Y)
      $RUNCMD "notmuch tag -\"$NEW_TAG\" +\"$UNREAD_TAG\" -- tag:\"$NEW_TAG\""
      ;;
    *)
      $RUNCMD "notmuch tag -\"$NEW_TAG\" -- tag:\"$NEW_TAG\""
      ;;
  esac
}


# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# MAIN
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

echo -e "\n----------------------------------------------------------------------"
echo "$(basename $0) start ${DRYRUN_MSG:-}"
echo "----------------------------------------------------------------------"
echo "NOTMUCH ROOT: $NOTMUCH_ROOT"
echo "MAILDIR ROOT: $MAILDIR_ROOT"


if [ ! -e "$NOTMUCH_ROOT/.notmuch" ]; then
  # create notmuch database if it does not exist
  echo "Creating notmuch database."
  Notmuch_Update
fi

MAILDIR_ACCOUNTS=($(echo "$(ls $MAILDIR_ROOT)"))


# ----------------------------------------------------------------------
# MAILBOXES:
# ----------------------------------------------------------------------
for MAILDIR_ACCOUNT in "${MAILDIR_ACCOUNTS[@]}"; do
  ACCOUNT_NAME="$MAILDIR_ACCOUNT"
  MAILDIR_ACCOUNT_ROOT="$MAILDIR_ROOT/$MAILDIR_ACCOUNT"
  echo "PROCESSING MAILDIR FOR ACCOUNT:: $MAILDIR_ACCOUNT_ROOT"
  # Review notmuch databaseand sync tags to maildir
  Notmuch_State_To_Maildir__Create_Maildir $MAILDIR_ACCOUNT_ROOT $ACCOUNT_NAME

  # Get list of mailboxes using a recursive find within root maildir:
  MAILBOXES_FULL_PATHS="$(echo "$(find $MAILDIR_ACCOUNT_ROOT -name "cur" -type d -exec dirname '{}' \;)" | sort;)"

  # Review the notmuch database state and sync up any changes first
  # (e.g. any retagged messages that need refiling)
  for MAILBOX_FULL_PATH in $MAILBOXES_FULL_PATHS; do
    Notmuch_State_To_Maildir__Move_To_Maildir $MAILBOX_FULL_PATH $ACCOUNT_NAME
  done
  for MAILBOX_FULL_PATH in $MAILBOXES_FULL_PATHS; do
    Notmuch_State_To_Maildir__Remove_From_Maildir $MAILBOX_FULL_PATH $ACCOUNT_NAME
  done

  # Sync maildir account with online
  $RUNCMD "mbsync -V ${ACCOUNT_NAME}-group" || true

  # Update the notmuch database to reflect the changes we just made,
  # if any (so it can find the new messages)
  Notmuch_Update

  # get a list of all mailboxes
  MAILBOXES_FULL_PATHS="$(echo "$(find $MAILDIR_ACCOUNT_ROOT -name "cur" -type d -exec dirname '{}' \;)" | sort;)"
  for MAILBOX_FULL_PATH in $MAILBOXES_FULL_PATHS; do
    Maildir_State_To_Notmuch__Add_Tags_To_Notmuch $MAILBOX_FULL_PATH $ACCOUNT_NAME
  done
  for MAILBOX_FULL_PATH in $MAILBOXES_FULL_PATHS; do
    Maildir_State_To_Notmuch__Remove_Tags_From_Notmuch $MAILBOX_FULL_PATH $ACCOUNT_NAME
  done
done

Notmuch_Cleanup
