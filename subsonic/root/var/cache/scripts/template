#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin
TAG_NAME="TAG_NAME"
IMG_NAME="IMG_NAME"
APP_NAME="APP_NAME"
APP_USER=${APP_USER:-$USER}
APP_REPO=${APP_REPO:-hurricane}
APP_CONFIG=${APP_CONFIG:-"/home/${APP_USER}/.${APP_NAME}"}
KEEP_TRANSCODE=${KEEP_TRANSCODE:-"false"}

( id -Gn | grep -q docker ) || [ $EUID == 0 ] || SUDO=sudo

if [ "${APP_USER}" != "appuser" ]; then
  APP_UID=$(getent passwd $APP_USER | awk -F":" '{print $3}')
  APP_GID=$(getent passwd $APP_USER | awk -F":" '{print $4}')
else
  APP_UID=$(id -u)
  APP_GID=$(id -g)
fi

if [ ${APP_USER} == "nobody" ]; then
  APP_USER="appuser"
fi

list_options() {
  echo ""
  echo "Launch ${APP_NAME} using:"
  echo "  ${APP_NAME}                          - Launch ${APP_NAME}"
  echo "  ${APP_NAME} bash                     - Launch bash shell in ${APP_NAME} container"
  echo ""
  exit 1
}

cleanup_stopped_instances() {
  for c in $(${SUDO} docker ps -a -q)
  do
    image=$(${SUDO} docker inspect --format="{{.Config.Image}}" ${c})
    if [[ ${image} == "${APP_REPO}/${IMG_NAME}:${TAG_NAME}" ]]; then
      running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${c})
      if [[ ${running} != true ]]; then
        echo "Cleaning up stopped ${APP_NAME} instances..."
        ${SUDO} docker rm -v "${c}" >/dev/null
      fi
    fi
  done
  running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${APP_NAME} 2> /dev/null)
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=KEEP_TRANSCODE=${KEEP_TRANSCODE}"
  ENV_VARS+=" --env=APP_UID=${APP_UID}"
  ENV_VARS+=" --env=APP_GID=${APP_GID}"
  ENV_VARS+=" --env=APP_USER=${APP_USER}"
  if [ -f /etc/timezone ]; then
    ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  elif [ ! -z "${TIMEZONE}" ]; then
    ENV_VARS+=" --env=TZ=${TIMEZONE}"
  elif [[ -f /etc/localtime ]]; then
    TZ=$(ls -la /etc/localtime| awk '{print $11}' | awk -F/ '{printf("%s/%s",$5,$6)}')
    ENV_VARS+=" --env=TZ=${TZ}"
  fi
}

prepare_docker_volume_parameters() {
  if [ ! -d "${APP_CONFIG}" ]; then
    mkdir -p ${APP_CONFIG}
  fi
  chown -R ${APP_UID}:${APP_GID} ${APP_CONFIG}
  # prepare local filesystems
  VOLUMES+=" --volume=${APP_CONFIG}:/config"
}

prepare_user_volume_parameters() {
  # Ensure subsonic host APP_CONFIG  directory exist.
  if [ ! -d "${APP_CONFIG}" ]; then
    echo "Error, Subsonic data directory: ${APP_CONFIG} does not exist."
    exit 1
  fi

  VOLUMES_CONFIG="${APP_CONFIG}/.dockervolumes"
  if [ ! -e "$VOLUMES_CONFIG" ]; then
    declare -a user_volumes
    echo "No existing user defined data volumes found."
    echo "Please enter any directory paths you wish to be accessible "
    echo "from the containerized environment, one entry per line."
    echo "Enter \"done\" when finished"
    while read mediapath; do
      if [ "$mediapath" == "done" ]; then
        break
      fi
      if [ ! -d "$mediapath" ]; then
        echo "Sorry, $mediapath is not a valid path."
      else
        user_volumes+=("$mediapath")
      fi
    done < /dev/stdin

    for user_volume in "${user_volumes[@]}"; do
      echo "${user_volume}" >> "${VOLUMES_CONFIG}"
    done
  fi

  # setup user volumes
  while read user_volume; do
    VOLUMES+=" --volume=${user_volume}:${user_volume}"
  done < "$VOLUMES_CONFIG"
}

prog=$(basename $0)
if [[ ${prog} == "${APP_NAME}" ]]; then
  [ "${1}" == "bash" ] && \
    prog=bash && \
    shift
  [[ "${1}" == "help" ]] && list_options && exit 1
fi

cleanup_stopped_instances
prepare_docker_env_parameters
prepare_docker_volume_parameters
prepare_user_volume_parameters

if [ ${running} ]; then
  echo "Already running."
  exit 0
else
  echo "Starting ${prog}..."
  if [ "${prog}" != "${APP_NAME}" ]; then
    ${SUDO} docker run -it \
      --rm \
      -p 4040:4040 \
      ${ENV_VARS} \
      ${VOLUMES} \
      --name=${APP_NAME} \
      ${APP_REPO}/${IMG_NAME}:${TAG_NAME} ${prog} $@
  else
    ${SUDO} docker run -d \
      -p 4040:4040 \
      ${ENV_VARS} \
      ${VOLUMES} \
      --name=${APP_NAME} \
      ${APP_REPO}/${IMG_NAME}:${TAG_NAME} > /dev/null
  fi
fi
