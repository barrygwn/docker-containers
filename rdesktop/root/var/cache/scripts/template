#!/bin/bash

PATH=/usr/sbin:/usr/bin:/sbin:/bin
TAG_NAME="TAG_NAME"
IMG_NAME="IMG_NAME"
APP_NAME="APP_NAME"
APP_USER=${APP_USER:-$USER}
APP_REPO=${APP_REPO:-hurricane}
APP_CONFIG=${APP_CONFIG:-"/home/${APP_USER}/.${APP_NAME}"}
XSOCK=/tmp/.X11-unix
XAUTH=/tmp/.docker.xauth

( id -Gn | grep -q docker ) || [[ $EUID == 0 ]] || SUDO=sudo

if [[ "${APP_USER}" != "appuser" ]]; then
  APP_UID=$(getent passwd $APP_USER | awk -F":" '{print $3}')
  APP_GID=$(getent passwd $APP_USER | awk -F":" '{print $4}')
else
  APP_UID=$(id -u)
  APP_GID=$(id -g)
fi

if [[ ${APP_USER} == "nobody" ]]; then
  APP_USER="appuser"
fi

list_options() {
  echo ""
  echo "Launch ${APP_NAME} using:"
  echo "  ${APP_NAME}                          - Launch ${APP_NAME}"
  echo "  ${APP_NAME} bash                     - Launch bash shell in ${APP_NAME} container"
  echo ""
  exit 1
}

cleanup_stopped_instances() {
  for c in $(${SUDO} docker ps -a -q); do
    image=$(${SUDO} docker inspect --format="{{.Config.Image}}" ${c})
    if [[ "${image}" == "${APP_REPO}/${IMG_NAME}:${TAG_NAME}" ]]; then
      running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${c})
      if [[ ${running} != true ]]; then
        echo "Cleaning up stopped ${APP_NAME} instances..."
        ${SUDO} docker rm -v "${c}" >/dev/null
      fi
    fi
  done
  running=$(${SUDO} docker inspect --format="{{.State.Running}}" ${APP_NAME} 2> /dev/null)
}

openin_started_instance() {
  if [[ $running ]]; then
    exec docker exec ${APP_NAME} ${APP_NAME} $@ > /dev/null 2>&1
  fi
}

prepare_docker_env_parameters() {
  ENV_VARS+=" --env=APP_UID=${APP_UID}"
  ENV_VARS+=" --env=APP_GID=${APP_GID}"
  ENV_VARS+=" --env=APP_USER=${APP_USER}"
  if [[ -f /etc/timezone ]]; then
    ENV_VARS+=" --env=TZ=$(cat /etc/timezone)"
  elif [[ ! -z "${TIMEZONE}" ]]; then
    ENV_VARS+=" --env=TZ=${TIMEZONE}"
  elif [[ -f /etc/localtime ]]; then
    TZ=$(ls -la /etc/localtime| awk '{print $11}' | awk -F/ '{printf("%s/%s",$5,$6)}')
    ENV_VARS+=" --env=TZ=${TZ}"
  fi
}

prepare_docker_env_display_parameters() {
  ENV_VARS+=" --env=DISPLAY"
  ENV_VARS+=" --env=XAUTHORITY=${XAUTH}"
}

prepare_docker_volume_display_parameters() {
  touch ${XAUTH}
  xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f ${XAUTH} nmerge -

  VOLUMES+=" --volume=${XSOCK}:${XSOCK}"
  VOLUMES+=" --volume=${XAUTH}:${XAUTH}"
}

prog=$(basename $0)
if [[ ${prog} == "${APP_NAME}" ]]; then
  for arg in "$@"; do
    if [[ "$arg" == "bash" ]]; then
      prog=$arg
      break
    fi
    if [[ "$arg" == "help" ]]; then
      list_options && exit 1
    fi
  done
fi

cleanup_stopped_instances
openin_started_instance $@
prepare_docker_env_parameters
prepare_docker_env_display_parameters
prepare_docker_volume_display_parameters

if [[ ${running} ]]; then
  echo "Already running."
  exit 0
else
  echo "Starting ${prog}..."
  if [[ "${prog}" != "${APP_NAME}" ]]; then
    ${SUDO} docker run -it \
      --rm \
      --net=host \
      ${ENV_VARS} \
      ${VOLUMES} \
      --name=${APP_NAME} \
      ${APP_REPO}/${IMG_NAME}:${TAG_NAME} ${prog}
  else
    ${SUDO} docker run -d \
      --net=host \
      ${ENV_VARS} \
      ${VOLUMES} \
      --name=${APP_NAME} \
      ${APP_REPO}/${IMG_NAME}:${TAG_NAME} ${APP_NAME} $@ > /dev/null
  fi
fi
